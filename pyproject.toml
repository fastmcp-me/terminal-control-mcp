[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "terminal-control-mcp"
version = "1.0.0"
description = "Terminal Control MCP Server for Claude Code"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["mcp", "terminal", "control", "claude", "debugging", "ssh", "database"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Debuggers",
]

dependencies = [
    "mcp>=1.0.0",
    "pexpect>=4.8.0",
    "typing-extensions>=4.0.0",
    "pydantic>=2.11.7",
]

[project.optional-dependencies]
dev = [
    "mcp[cli]>=1.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=0.950",
    "ruff>=0.1.0",
    "types-pexpect>=4.8.0",
]

[project.urls]
Homepage = "https://github.com/wehnsdaefflae/terminal-control-mcp"
Documentation = "https://github.com/wehnsdaefflae/terminal-control-mcp/blob/main/README.md"
Repository = "https://github.com/wehnsdaefflae/terminal-control-mcp"
Issues = "https://github.com/wehnsdaefflae/terminal-control-mcp/issues"

[project.scripts]
terminal-control-mcp = "terminal_control_mcp.main:main_sync"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["terminal_control_mcp"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "C90", # flake8-mccabe (complexity checks)
    "PLR", # pylint refactor rules (includes line count limits)
]
ignore = [
    "E501",  # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["PLR0915"]  # Allow longer test functions


[tool.ruff.lint.mccabe]
# Set the maximum allowed complexity. Functions exceeding this will be flagged.
max-complexity = 10

[tool.ruff.lint.pylint]
# Set maximum number of statements in a function
max-statements = 20
