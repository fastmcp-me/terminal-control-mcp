Metadata-Version: 2.4
Name: interactive-automation-mcp
Version: 1.0.0
Summary: Interactive Automation MCP Server for Claude Code
Author-email: Your Name <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/interactive-automation-mcp
Project-URL: Documentation, https://github.com/yourusername/interactive-automation-mcp/blob/main/README.md
Project-URL: Repository, https://github.com/yourusername/interactive-automation-mcp
Project-URL: Issues, https://github.com/yourusername/interactive-automation-mcp/issues
Keywords: mcp,automation,interactive,claude,debugging,ssh,database
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Software Development :: Debuggers
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: mcp>=1.0.0
Requires-Dist: pexpect>=4.8.0
Requires-Dist: ptyprocess>=0.7.0
Requires-Dist: typing-extensions>=4.0.0
Requires-Dist: pydantic>=2.11.7
Provides-Extra: dev
Requires-Dist: mcp[cli]>=1.0.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: types-pexpect>=4.8.0; extra == "dev"

# Interactive Automation MCP Server

A modern FastMCP-based server that enables Claude Code to perform expect/pexpect-style automation for interactive programs. Built with the latest MCP Python SDK 1.12.0, this server provides intelligent automation for programs that require user interaction, such as SSH sessions, database connections, interactive installers, and debugging workflows.

## ✨ Features

### 🏗️ **Modern FastMCP Architecture**
- **⚡ FastMCP Framework**: Built with MCP Python SDK 1.12.0 for optimal performance
- **🔧 Decorator-Based Tools**: Clean `@mcp.tool()` decorators with automatic schema generation
- **📝 Pydantic Models**: Type-safe input/output validation with structured data support
- **🎯 Automatic Schema Generation**: JSON schemas generated from Python type hints
- **🔄 Lifespan Management**: Proper startup/shutdown with resource cleanup

### 🚀 **Core Automation Features**
- **🔄 Automated Interactive Sessions**: Handle complex multi-step interactions with terminal programs
- **🎯 Pattern-Based Automation**: Wait for specific prompts and automatically respond
- **📊 Session Management**: Maintain persistent interactive sessions across multiple operations
- **🐛 Universal Debugging**: Debug ANY program (GDB, PDB, LLDB, custom debuggers)
- **🚀 Universal Command Execution**: Run ANY terminal command with optional automation
- **🔒 User-Controlled Security**: Maximum flexibility with user responsibility
- **🐍 Universal Programming Support**: Work with any programming language or tool

### 💪 **Performance & Reliability**
- **📦 Minimal Dependencies**: Only 4 essential dependencies (reduced from 9)
- **⚡ Fast Installation**: Lightweight package with minimal footprint
- **🛡️ Type Safety**: Full type coverage with mypy and Pydantic validation
- **🧹 Clean Code**: Modern Python with black formatting and ruff linting

## 🚀 Quick Start

### Installation

```bash
# Create virtual environment
uv venv
source .venv/bin/activate

# Install the package
pip install .

# Or install in development mode
pip install -e ".[dev]"
```

### Configuration

Once installed, configure the MCP server in your AI assistant:

## 🎯 Platform Setup

### 🤖 Claude Code (Anthropic)

1. **Install the package first (required for console script)**:
   ```bash
   # Install the package to create the console script
   pip install .
   ```

2. **Add the MCP server using Claude Code CLI**:
   ```bash
   # Recommended: User scope (available across all projects)
   claude mcp add interactive-automation -s user interactive-automation-mcp

   # Alternative: Local scope (default - current project only)
   claude mcp add interactive-automation interactive-automation-mcp

   # Alternative: Project scope (shared via .mcp.json in version control)
   claude mcp add interactive-automation -s project interactive-automation-mcp
   ```

3. **Alternative: Manual configuration** (if needed):
   - **Location**: Use `claude mcp add` command instead of manual configuration
   - **Legacy method** (not recommended):
   ```json
   {
     "mcpServers": {
       "interactive-automation": {
         "command": "interactive-automation-mcp",
         "cwd": "/path/to/interactive-automation-mcp",
         "env": {
           "PATH": "/path/to/interactive-automation-mcp/.venv/bin:${PATH}"
         }
       }
     }
   }
   ```

4. **Verify the server was added**:
   ```bash
   claude mcp list
   ```

**Note**: The MCP server will be automatically launched by Claude Code when needed - no manual activation required.

### 🔧 Visual Studio Code with GitHub Copilot

1. **Configure in VS Code settings** (MCP extension or built-in support):
   - Open **Settings** (`Ctrl+,` or `Cmd+,`)
   - Search for "MCP" or "Model Context Protocol"
   - Add server configuration:
   ```json
   {
     "mcp.servers": {
       "interactive-automation": {
         "command": "/path/to/interactive-automation-mcp/.venv/bin/python",
         "args": ["-m", "interactive_automation_mcp.main"],
         "cwd": "/path/to/interactive-automation-mcp"
       }
     }
   }
   ```

2. **Alternative configuration using console script**:
   ```json
   {
     "mcp.servers": {
       "interactive-automation": {
         "command": "/path/to/interactive-automation-mcp/.venv/bin/interactive-automation-mcp",
         "cwd": "/path/to/interactive-automation-mcp"
       }
     }
   }
   ```

3. **Reload VS Code** to apply the configuration

**Note**: The MCP server will be automatically launched by VS Code when needed - no manual activation required.

### 💎 Other MCP-Compatible Clients

**Note**: As of now, the main MCP-compatible clients are Claude Code and VS Code with appropriate extensions. Google's Gemini does not currently have an official CLI with MCP support.

For other MCP clients that may be developed in the future, the general pattern is:

1. **Configure the MCP server**:
   ```json
   {
     "command": "/path/to/interactive-automation-mcp/.venv/bin/python",
     "args": ["-m", "main"],
     "cwd": "/path/to/interactive-automation-mcp"
   }
   ```

2. **Check the client's documentation** for specific MCP server configuration requirements

### 🐳 Docker Setup (Optional)

For containerized environments, you can run the MCP server in a container:

1. **Create Dockerfile**:
   ```dockerfile
   FROM python:3.10-slim
   
   WORKDIR /app
   COPY . .
   
   RUN pip install -e .
   
   # MCP servers use stdio, not HTTP
   CMD ["interactive-automation-mcp"]
   ```

2. **Configure MCP client to use containerized server**:
   ```json
   {
     "command": "docker",
     "args": ["run", "-i", "--rm", "interactive-automation-mcp"]
   }
   ```

**Note**: MCP uses stdio communication, not HTTP. The server will be automatically started by the MCP client when needed.

### 🔧 Troubleshooting

**Common Issues:**

1. **"Command not found"**: Check that the executable path in MCP configuration is correct
2. **"Permission denied"**: Check file permissions for the Python executable and script
3. **"Module not found"**: Verify the working directory (`cwd`) in MCP configuration is correct
4. **"Server won't start"**: Check MCP client logs for detailed error messages

**Debug commands:**
```bash
# Test server manually (for debugging only)
/path/to/.venv/bin/python -m interactive_automation_mcp.main

# Check installation
pip show interactive-automation-mcp

# Verify executable exists
ls -la /path/to/.venv/bin/interactive-automation-mcp
```

**Note**: The MCP server should start automatically when the MCP client needs it. Manual activation is only for debugging purposes.

## 🛠️ Complete Tool Set (6 Truly Universal Tools)

### 📋 Session Management (3 tools)
- **`create_interactive_session`**: Create new interactive sessions for any program
- **`list_sessions`**: List all active sessions with detailed information
- **`destroy_session`**: Terminate and cleanup sessions safely

### 🤖 Basic Automation (2 tools)
- **`expect_and_respond`**: Wait for pattern and send response (universal)
- **`multi_step_automation`**: Execute sequence of automation steps (any program)

### 🔗 Universal Command Execution (1 tool)
- **`execute_command`**: Execute ANY command with optional automation - truly universal!
  - **Examples**: `ssh user@host`, `mysql -u root -p`, `gdb program`, `echo hello`, `ls -la`
  - **Automation**: Optional automation patterns for interactive prompts
  - **Arguments**: Optional `command_args` array for cleaner argument handling
  - **Supports**: Any terminal command - interactive or non-interactive

**Note**: Analysis, debugging, and advanced session control are all handled through the universal `execute_command` tool by running any command, and then using `expect_and_respond` or `multi_step_automation` to interact with the session.

## 🧪 Trying Out the Server

### Quick Start
```bash
# Install and activate
pip install .
claude mcp add interactive-automation -s user interactive-automation-mcp
```

### Session Management Tools

#### Tool: `create_interactive_session`
```bash
# Ask Claude Code:
"Use create_interactive_session tool with command 'echo hello world' and then use list_sessions tool"
"Use create_interactive_session tool: python3 -c 'import code; code.interact()' to calculate 2+2"
```

#### Tool: `list_sessions`
```bash
# Ask Claude Code:
"Use list_sessions tool to show all active sessions"
```

#### Tool: `destroy_session`
```bash
# Ask Claude Code:
"Use destroy_session tool to terminate session [session_id]"
```

### Basic Automation Tools

#### Tool: `expect_and_respond`
```bash
# Ask Claude Code:
"Use expect_and_respond tool on session [session_id] to wait for 'Name:' pattern and respond 'Alice'"
"Use expect_and_respond tool to wait for 'password:' prompt and respond with the password"
```

#### Tool: `multi_step_automation`
```bash
# Ask Claude Code:
"Use multi_step_automation tool with steps: wait for 'login:', respond 'user', then wait for 'password:', respond 'pass'"
```

### Universal Command Execution Tool

#### Tool: `execute_command`
```bash
# Ask Claude Code:
"Use execute_command tool: 'top' with execution_timeout 5 seconds then destroy session"
"Use execute_command tool: 'ssh localhost' with automation patterns for password prompts"
"Use execute_command tool: 'docker exec -it mycontainer bash' with follow-up commands to list files"
"Use execute_command tool: 'kubectl exec -it pod-name -- sh' with follow-up commands to check logs"
```

### Python Debugging Example

Using the provided `examples/example_debug.py` - **Claude autonomously debugs using MCP tools**:

```bash
# To ensure Claude uses the MCP server tools, be explicit:

"Use the interactive automation MCP server to debug examples/example_debug.py. 
Start by using execute_command to launch 'python3 -m pdb examples/example_debug.py', 
then use multi_step_automation to systematically debug and identify all bugs."

# Alternative explicit prompts that guarantee MCP tool usage:
"Create an interactive debugging session for examples/example_debug.py using create_interactive_session tool"
"Execute 'python3 -m pdb examples/example_debug.py' with the execute_command tool and debug the issues"
"Use multi_step_automation tool to run a complete debugging workflow on examples/example_debug.py"
```

**Ensuring MCP Tool Usage - Key Phrases:**
- **"Use the interactive automation MCP server"** - Explicitly mentions the server
- **"using [tool_name] tool"** - Names specific tools to use
- **"Create an interactive session"** - Triggers `create_interactive_session` tool
- **"Execute [command] with execute_command tool"** - Triggers `execute_command` tool  
- **"Use multi_step_automation"** - Triggers `multi_step_automation` tool

**Claude's autonomous debugging workflow with MCP tools:**
1. **execute_command**: `'python3 -m pdb examples/example_debug.py'`
2. **multi_step_automation** with steps:
   - `expect: "(Pdb)", respond: "c"` - Run to see where it crashes
   - `expect: "IndexError", respond: "l"` - List code around the error
   - `expect: "(Pdb)", respond: "b buggy_function"` - Set strategic breakpoint
   - `expect: "(Pdb)", respond: "r"` - Restart program
   - `expect: "(Pdb)", respond: "c"` - Continue to breakpoint
   - `expect: "(Pdb)", respond: "p data"` - Inspect the data array
   - `expect: "(Pdb)", respond: "p len(data)"` - Check array length
   - `expect: "(Pdb)", respond: "p i"` - Inspect loop variable
   - `expect: "(Pdb)", respond: "n"` - Step through the problematic loop
3. **Analysis & Report**: Claude identifies the `range(len(data) + 1)` bug

**What Claude discovers using the MCP tools:**
- IndexError from accessing `data[5]` when array only has indices 0-4
- Root cause: `range(len(data) + 1)` should be `range(len(data))`
- Additional issues: division by zero, recursive inefficiency
- Provides exact code fixes and explanations

### Multi-Step Automation Examples

```bash
# Ask Claude Code:
"Use execute_command tool: 'ssh server' with automation patterns for login, then use multi_step_automation: check disk usage, if >80% clean logs"
"Use create_interactive_session tool: mysql -u root -p, then use multi_step_automation for health check queries"
"Use execute_command tool: 'gdb crashed_program core' with multi_step_automation to analyze backtrace"
```

### Development Testing
```bash
# Run basic functionality tests
python tests/test_core.py
python tests/test_basic.py

# Install with development dependencies
pip install -e ".[dev]"

# Run all tests
pytest tests/
```

## 💡 Usage Examples

### 🔑 Interactive Session Examples
```bash
# Natural language commands to Claude (keywords that trigger MCP tools):
"Create interactive session: SSH to prod.example.com and check disk usage"
"Execute command: mysql -u root -p and show tables"
"Create session: gdb myprogram and set breakpoints"
"Execute interactively: python -m pdb myscript.py"
"Run with automation: ssh user@host (handle password prompts)"
"Create interactive session: docker exec -it container bash"
"Execute command: kubectl exec -it pod sh and list files"
"Start session: redis-cli and check memory usage"
"Create session with automation patterns for password prompts"
"Execute command with follow-up commands after connection"
```

### 🚀 Truly Universal Examples
```bash
# ANY command that runs in a terminal:
"Run interactive session: ssh user@host"
"Execute interactively: docker exec -it myapp bash"
"Start session: kubectl exec -it pod-name -- sh"
"Launch: nc -l 8080"
"Run: socat - TCP:localhost:3000"
"Start interactive Python: python3 -c 'import code; code.interact()'"
"Launch my custom REPL: ./my-custom-repl --debug"
"Open serial connection: minicom /dev/ttyUSB0"
"Start screen session: screen /dev/ttyACM0 9600"
"Attach to tmux: tmux attach-session -t main"
```

### 🐍 Python Debugging Examples
```bash
# Natural language commands to Claude:
"Start a PDB debugging session with my Python script bug_script.py"
"Debug my Flask app: set breakpoints, inspect variables, and trace execution"
"Connect to a running Python process with PDB and debug live issues"
"Analyze a Python crash: load core dump, examine stack trace, identify root cause"

# Benefits: Interactive debugging with full context, real-time variable inspection,
# step-through execution, and automated breakpoint management
```

### 🤖 Claude Code Integration Examples  
```bash
# Natural language commands to Claude:
"Launch another Claude Code instance in this directory and ask it to analyze my logs"
"Start a new Claude Code session in my backend folder and have it run tests"
"Open Claude Code in my frontend directory and coordinate with it on API changes"
"Create a Claude Code instance for each microservice and manage them simultaneously"

# Benefits: Parallel development workflows, specialized AI assistants per project,
# coordinated multi-repository work, and distributed task execution
```

### 🔍 Universal Analysis Examples
```bash
# Natural language commands to Claude:
"Connect to my crashed program with GDB and analyze the crash"
"Connect to my performance monitoring tool and gather metrics"
"Connect to my log analysis tool and find error patterns"
"Connect to any program and then send commands to analyze it"
```

### 🔧 Advanced Automation
```bash
# Natural language commands to Claude:
"Connect to SSH, then connect to database, run diagnostics, and generate report"
"Debug the crashed server binary, analyze the core dump, and suggest fixes"
"Connect to multiple servers, check their status, and restart services if needed"
"Set up debugging session with custom debugger and analyze the issue"
```

### 🎯 Program-Specific Examples
```bash
# SSH with different auth methods:
"Connect to server using SSH key authentication"
"Connect to server using password authentication"

# Database-specific operations:
"Connect to MySQL with SSL and execute performance queries"
"Connect to PostgreSQL and analyze table statistics"

# Debugging with different targets:
"Debug program with core dump analysis"
"Attach debugger to running process ID 1234"
"Debug script with custom environment variables"
```

## 🔒 Security

**Universal Design Philosophy**: Maximum flexibility with user responsibility
- **No command filtering** - All commands allowed (including `sudo`, `su`, system commands)
- **No path restrictions** - All paths accessible (user controls access)
- **Rate limiting** - 60 calls per minute to prevent abuse
- **Session limits** - 50 concurrent sessions to prevent resource exhaustion
- **Comprehensive logging** - Full audit trail of all operations
- **User responsibility** - Security is managed by the user, not the MCP server

## 📁 Project Structure

```
interactive-automation-mcp/
├── pyproject.toml              # Modern Python project configuration
├── README.md                   # This file
├── src/
│   └── interactive_automation_mcp/
│       ├── __init__.py        # Package initialization
│       ├── main.py            # Main MCP server entry point
│       ├── session_manager.py # Session lifecycle management
│       ├── automation_engine.py # Universal automation engine
│       ├── interactive_session.py # Session handling
│       ├── security.py        # Security controls
│       └── ...                # Other modules
├── tests/                      # Test suite
├── docs/                       # Documentation
└── examples/                   # Example scripts
```

## 🚀 Development Status

- ✅ **Production Ready** - All 6 universal tools implemented and tested
- ✅ **FastMCP Architecture** - Modern MCP Python SDK 1.12.0 implementation
- ✅ **Type Safety** - Full Pydantic model validation and type coverage
- ✅ **Minimal Dependencies** - Only 4 essential dependencies (reduced from 9)
- ✅ **Complete Security** - Comprehensive security controls
- ✅ **Clean Architecture** - Well-organized, maintainable code
- ✅ **Python Debugging** - Full PDB integration
- ✅ **Modern Tooling** - pyproject.toml, uv, black, ruff, mypy

## 📄 License

MIT License - see LICENSE file for details

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for new functionality
5. Ensure all tests pass
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

## 🙏 Acknowledgments

- Built on the [Model Context Protocol (MCP)](https://github.com/anthropics/mcp) by Anthropic
- Uses [pexpect](https://pexpect.readthedocs.io/) for terminal automation
- Inspired by the need for intelligent interactive automation in AI workflows
